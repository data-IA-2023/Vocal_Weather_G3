
import re
import requests
import dateparser
from dotenv import load_dotenv
import os
import nltk
from nltk import ne_chunk, word_tokenize, pos_tag
from nltk.tree import Tree
from datetime import datetime

# Download NLTK resources
nltk.download('maxent_ne_chunker')
nltk.download('words')


def extract_entities(text):
    # Tokenize the input text
    words = word_tokenize(text)
    # Perform part-of-speech tagging
    tagged_words = pos_tag(words)
    # Perform named entity recognition
    named_entities = ne_chunk(tagged_words)
    
    city = None
    date = None
    
    # Traverse the named entities tree
    for entity in named_entities:
        if isinstance(entity, Tree):
            if entity.label() == 'GPE':
                city = ' '.join([word for word, _ in entity.leaves()])
            elif entity.label() == 'DATE':
                date_str = ' '.join([word for word, _ in entity.leaves()])
                parsed_date = dateparser.parse(date_str)
                if parsed_date:
                    date = parsed_date.strftime("%Y-%m-%d")

    return city, date

def get_weather_forecast(lat, lon, date):
    
    api_key = "a9769335750f4ac2c0fac2377547d1cd"
    
    # Formatting the date for the API request
    formatted_date = date
    
    url = f'https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={api_key}'
    response = requests.get(url)
    
    # Checking the API response
    if response.status_code == 200:
        weather_data = response.json()
        return weather_data
    else:
        return {"error": "Failed to obtain weather data"}

def main(text):
    city, date = extract_entities(text)
    print("City:", city)
    print("Date:", date)
    if city and date:
        lat, lon = get_lat_lon(city)
        if lat and lon:
            weather_info = get_weather_forecast(lat, lon, date)
            print("Weather information:", weather_info)
            return weather_info
        else:
            print("Failed to obtain latitude and longitude for the city.")
            return {"error": "Failed to obtain location coordinates"}
    else:
        print("Unable to detect city or date in the text.")
        return {"error": "Missing city or date"}

# Example usage
if __name__ == "__main__":
    text_input = "What's the weather in paris on 15 Mars 2024 ?" 
    main(text_input)
